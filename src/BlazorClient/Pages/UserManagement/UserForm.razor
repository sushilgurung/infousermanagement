@page "/users/add"
@page "/users/edit/{UserId:int}"

@using BlazorClient.Dto
@using BlazorClient.Services.UserService

@inject IUserService UserService
@inject NavigationManager Navigation


<h3>@(IsEditMode ? "Edit User" : "Add User")</h3>
<EditForm OnValidSubmit="HandleValidSubmit" EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="user.ForeName" />
        <ValidationMessage For="@(() => user.ForeName)" />
    </div>
    <div class="mb-3">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="user.SurName" />
        <ValidationMessage For="@(() => user.SurName)" />
    </div>
    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="user.Email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="user.DateOfBirth" />
        <ValidationMessage For="@(() => user.DateOfBirth)" />
    </div>
    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="user.IsActive" @attributes="dateAttributes" />
        <label class="form-check-label">Is Active</label>
    </div>

    <button type="submit" class="btn btn-primary">@((IsEditMode ? "Update" : "Save"))</button>
    <button class="btn btn-secondary" @onclick="BackToList">Back to List</button>
</EditForm>
@code {
    [Parameter] public int? UserId { get; set; }

    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = default!;

    private CreateUserDto user = new();
    private bool IsEditMode => UserId.HasValue;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private Dictionary<string, object> dateAttributes;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(user);
        messageStore = new ValidationMessageStore(editContext);
        SetDate();
        if (IsEditMode)
        {
            PreloadService.Show(SpinnerColor.Light, "Loading data...");
            var result = await UserService.GetUserByIdAsync(UserId.Value);
            if (result.IsSuccess)
            {
                user.ForeName = result.Data.ForeName;
                user.SurName = result.Data.SurName;
                user.Email = result.Data.Email;
                user.DateOfBirth = result.Data.DateOfBirth;
                user.IsActive = result.Data.IsActive;
            }
            else
            {
                BackToList();
            }
            PreloadService.Hide();
        }
    }
    private void SetDate()
    {
        var today = DateTime.Today;
        var hundredYearsAgo = today.AddYears(-100);

        dateAttributes = new Dictionary<string, object>
        {
            { "min", hundredYearsAgo.ToString("yyyy-MM-dd") },
            { "max", today.ToString("yyyy-MM-dd") }
        };
    }
    private async Task HandleValidSubmit()
    {
        PreloadService.Show(SpinnerColor.Light, "Saving...");
        var result = IsEditMode
            ? await UserService.UpdateUserAsync(UserId.Value, user)
            : await UserService.CreateUserAsync(user);
        PreloadService.Hide();
        ToastMessage toastMessage = new ToastMessage();
        toastMessage.Type = ToastType.Danger;
        toastMessage.Title = "Error";
        toastMessage.HelpText = $"{DateTime.Now}";
        if (result.IsSuccess)
        {
            toastMessage.Type = ToastType.Success;
            toastMessage.Title = "Success";
        }
        else if (result.Errors is not null && result.Errors.Count > 0)
        {
            foreach (var error in result.Errors)
            {
                messageStore.Add(editContext.Field(error.Key), error.Value);
            }
            editContext.NotifyValidationStateChanged();
            return;
        }
        toastMessage.Message = result.Message;
        ToastService.Notify(toastMessage);
        BackToList();
    }

    /// <summary>
    /// This method navigates back to the user list page.
    /// </summary>
    private void BackToList()
    {
        Navigation.NavigateTo("/UserManagement");
    }
}
