@page "/login"
@layout LoginLayout

@using BlazorClient.Services.AuthService
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject IAuthService AuthService



<div class="container d-flex align-items-center justify-content-center min-vh-100">
    <div class="card shadow-lg border-0 rounded-4 p-4" style="max-width: 500px; width: 100%;">
        <div class="text-center mb-4">
            <img src="https://www.inflo.com/wp-content/uploads/2025/01/Inflo_master_RGB-98x40.png" alt="Logo" class="img-fluid" style="max-height: 80px;" />
            <h3 class="mt-3">Login to your account</h3>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger">@error</div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="userName" class="form-label">Username</label>
                <InputText @bind-Value="loginModel.UserName" id="userName" class="form-control" />
                @if (validationErrors?.ContainsKey("UserName") == true)
                {
                    foreach (var message in validationErrors["UserName"])
                    {
                        <div class="text-danger small">@message</div>
                    }
                }
            </div>

            <div class="mb-3 position-relative">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                    <InputText @bind-Value="loginModel.Password"
                               id="password"
                               class="form-control"
                               type="@passwordInputType" />
                    <button type="button"
                            class="btn btn-outline-secondary"
                            @onclick="TogglePasswordVisibility"
                            tabindex="-1">
                        <i class="bi @(isPasswordVisible ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>
                @if (validationErrors?.ContainsKey("Password") == true)
                {
                    foreach (var message in validationErrors["Password"])
                    {
                        <div class="text-danger small">@message</div>
                    }
                }
            </div>

            <Button Type="ButtonType.Submit"
                    Color="ButtonColor.Success"
                    class="btn btn-Success w-100 py-2"
                    Disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </Button>


        </EditForm>

        <div class="mt-4 text-center text-muted small">
            &copy; @DateTime.Now.Year. Inflo Group Limited
        </div>
    </div>
</div>



@code {
    private LoginModel loginModel = new();
    private string? error;
    private IDictionary<string, string[]>? validationErrors;
    private bool isLoading = false;


    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";

    /// <summary>
    /// This method toggles the visibility of the password input field.
    /// </summary>
    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    /// <summary>
    /// This method handles the login process.
    /// </summary>
    /// <returns></returns>
    private async Task HandleLogin()
    {
        error = null;
        validationErrors = null;
        isLoading = true;
        try
        {
            var result = await AuthService.LoginAsync(loginModel.UserName, loginModel.Password);
            if (result.IsSuccess)
            {
                await AuthService.NotifyUserAuthenticationAsync();
                Navigation.NavigateTo("/");
            }
            else if (result.Errors != null)
            {
                validationErrors = result.Errors;
            }
            else
            {
                error = result.Message;
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    //// <summary>
    /// This class represents the model for user login.
    /// </summary>
    public class LoginModel
    {
        [Required(ErrorMessage = "UserName is required")]
        public string UserName { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
