
namespace Application.Features.{{FolderName}}.Query.{{Feature}};

public class {{Feature}}Query : IRequest<IResult>
{
 
}

public class {{Feature}}QueryHandler : IRequestHandler<{{Feature}}Query, IResult>
{
    private readonly ILogger<{{Feature}}QueryHandler> _logger;
    public {{Feature}}QueryHandler(
        ILogger<{{Feature}}QueryHandler> logger
        )
    {
        this._logger = logger;
    }
    public async Task<IResult> Handle({{Feature}}Query request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Starting {FunctionName} with request: {@RequestData}",
            nameof({{Feature}}QueryHandler), request);
        try
        {
            throw new NotImplementedException();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "{FunctionName} trigger function received a request for {@RequestData}", nameof({{Feature}}QueryHandler), request);
            return Results.Problem("Failed. Please try again later.", statusCode: 500);
        }
    }
}


