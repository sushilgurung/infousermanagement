using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Persistence.Contexts;

    public class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, string>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) {{ }}


        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                switch (entry.State)
                {
                    case EntityState.Added:
                        SetProperty(entry, "created_at", DateTime.UtcNow);
                        break;
                    case EntityState.Modified:
                        SetProperty(entry, "updated_at", DateTime.UtcNow);
                        break;
                        //case EntityState.Deleted:
                        //    entry.Reload();
                        //    break;
                }
            }
            return base.SaveChangesAsync(cancellationToken);
        }

        private void SetProperty(EntityEntry entry, string propertyName, object? value)
        {
            var property = entry.Metadata.FindProperty(propertyName);
            if (property != null)
            {
                entry.Property(propertyName).CurrentValue = value;
            }
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            var configType = typeof(IApplicationDbConfigurations);
            var assembly = configType.Assembly;
            string namespaceName = configType.Namespace;

            var configurations = assembly.GetTypes()
                .Where(t => t.Namespace == namespaceName
                && t.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEntityTypeConfiguration<>))
                && !t.IsInterface
                && !t.IsAbstract);

            foreach (var config in configurations)
            {
                var configurationInstance = Activator.CreateInstance(config);
                builder.ApplyConfiguration((dynamic)configurationInstance);
            }
            base.OnModelCreating(builder);
        }
    }
